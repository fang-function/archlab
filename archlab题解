archlab
人从装这个环境开始就已经傻掉了，这一个lab一定要好好看4，5章讲的内容
打开sim文件
cd sim/
make clean
make
part1
example.c，题目的意思相当于徒手写ys，当场傻掉，怎么写？
书上有模板，可以直接抄
sum
求链表的和
long sum_list(list_ptr ls)
{
    long val = 0;
    while (ls) {
	val += ls->val;
	ls = ls->next;
    }
    return val;
}
把这个写成汇编，就出来了
	.pos 0
	irmovq stack,%rsp
	call main
	halt
# Sample linked list
	.align 8
ele1:
	.quad 0x00a
	.quad ele2
ele2:
	.quad 0x0b0
	.quad ele3
ele3:
	.quad 0xc00
	.quad 0
#This is main function
//主要改动的是这里，前面的相当于是一个固定的板块几乎不要改动
main:
	irmovq ele1,%rdi
	call sum_list
	ret 
#long sum_list(list_ptr ls)
# ls in %rdi ,return i %rax
sum_list:
	irmovq $0,%r14
        irmovq $0,%rax
L2:
        subq %r14,%rdi
        je L4
	mrmovq (%rdi),%r13
        addq %r13,%rax
	mrmovq 8(%rdi),%rdi
        jmp     L2
L4:
        ret

#stack starts here and grows to lower addresses
	.pos 0x200
stack:

Stopped in 29 steps at PC = 0x13.  Status 'HLT', CC Z=1 S=0 O=0
Changes to registers:
%rax:	0x0000000000000000	0x0000000000000cba
%rsp:	0x0000000000000000	0x0000000000000200
%r13:	0x0000000000000000	0x0000000000000c00

Changes to memory:
0x01f0:	0x0000000000000000	0x000000000000005b
0x01f8:	0x0000000000000000	0x0000000000000013

rsum
用递归的方法实现链表的和
	.pos 0
	irmovq stack,%rsp
	call main
	halt
# Sample linked list
	.align 8
ele1:
	.quad 0x00a
	.quad ele2
ele2:
	.quad 0x0b0
	.quad ele3
ele3:
	.quad 0xc00
	.quad 0

#main function
main:
	irmovq ele1,%rdi
	call rsum_list
	ret

#rsum_list(list_ptr ls)
#ls in %rdi,  return in %rax
rsum_list:
  irmovq $0,%r14
  subq %r14,%rdi
  je L7
  pushq %rbx
  mrmovq (%rdi), %rbx
  mrmovq 8(%rdi), %rdi
  call rsum_list
  addq %rbx,%rax
  popq %rbx
  ret
L7:
  irmovq $0,%rax
  ret

#stack starts here and grows to lower address
	.pos 0x200
stack:

Stopped in 41 steps at PC = 0x13.  Status 'HLT', CC Z=0 S=0 O=0
Changes to registers:
%rax:	0x0000000000000000	0x0000000000000cba
%rsp:	0x0000000000000000	0x0000000000000200

Changes to memory:
0x01c0:	0x0000000000000000	0x0000000000000090
0x01c8:	0x0000000000000000	0x00000000000000b0
0x01d0:	0x0000000000000000	0x0000000000000090
0x01d8:	0x0000000000000000	0x000000000000000a
0x01e0:	0x0000000000000000	0x0000000000000090
0x01f0:	0x0000000000000000	0x000000000000005b
0x01f8:	0x0000000000000000	0x0000000000000013

copy_clock
将src的地址复制到dest中，并进行异或运算
        .pos 0
	irmovq stack,%rsp
	call main
	halt

#two block
	.align 8
# Source block
src:
	.quad 0x00a
	.quad 0x0b0
	.quad 0xc00
# Destination block
dest:
	.quad 0x111
	.quad 0x222
	.quad 0x333

main:
	irmovq src,%rdi
	irmovq dest,%rsi
	irmovq $3,%rdx
	call copy_block
	ret

#long copy_block(long *src,long *dest,long len)
copy_block:
  irmovq $0,%r14
  irmovq $1,%r13
  irmovq $8,%r12
  irmovq $0, %rax
L13:
  subq %r14,%rdx
  jle L15
  mrmovq (%rdi), %rcx
  rmmovq %rcx, (%rsi)
  xorq %rcx, %rax
  subq %r13, %rdx
  addq %r12,%rsi
  addq %r12,%rdi
  jmp L13
L15:
  ret

#stack starts here and grows to lower addresses
	.pos 0x200
stack:
//
Stopped in 42 steps at PC = 0x13.  Status 'HLT', CC Z=1 S=0 O=0
Changes to registers:
%rax:	0x0000000000000000	0x0000000000000cba
%rcx:	0x0000000000000000	0x0000000000000c00
%rsp:	0x0000000000000000	0x0000000000000200
%rsi:	0x0000000000000000	0x0000000000000048
%rdi:	0x0000000000000000	0x0000000000000030
%r12:	0x0000000000000000	0x0000000000000008
%r13:	0x0000000000000000	0x0000000000000001

Changes to memory:
0x0030:	0x0000000000000111	0x000000000000000a
0x0038:	0x0000000000000222	0x00000000000000b0
0x0040:	0x0000000000000333	0x0000000000000c00
0x01f0:	0x0000000000000000	0x000000000000006f
0x01f8:	0x0000000000000000	0x0000000000000013//
part2
iaddq指令的运用，对照执行过程就可以整出来，
取指，译码，执行，访存，写回，更新PC
在合适的地方添加iaddq即可
主要考查的是iaddq指令的运用，看完书上那些例子基本可以整出来
//取指阶段
bool instr_valid = icode in //是否是合法的指令
	{ INOP, IHALT, IRRMOVQ, IIRMOVQ, IRMMOVQ, IMRMOVQ,
	  IOPQ, IJXX, ICALL, IRET, IPUSHQ, IPOPQ,IIADDQ };

# Does fetched instruction require a regid byte?
bool need_regids =//是否需要寄存器
	icode in { IRRMOVQ, IOPQ, IPUSHQ, IPOPQ, 
		     IIRMOVQ, IRMMOVQ, IMRMOVQ,IIADDQ };

# Does fetched instruction require a constant word?
bool need_valC =//是否需要立即数
	icode in { IIRMOVQ, IRMMOVQ, IMRMOVQ, IJXX,ICALL,IIADDQ };

################ Decode Stage    ###################################
译码与写回译码
## What register should be used as the A source?
word srcA = [
	icode in { IRRMOVQ, IRMMOVQ, IOPQ, IPUSHQ  } : rA;
	icode in { IPOPQ, IRET } : RRSP;
	1 : RNONE; # Don't need register
];

## What register should be used as the B source?
word srcB = [
	icode in { IOPQ, IRMMOVQ, IMRMOVQ,IIADDQ} : rB;
	icode in { IPUSHQ, IPOPQ, ICALL, IRET } : RRSP;
	1 : RNONE;  # Don't need register
];

## What register should be used as the E destination?
word dstE = [
	icode in { IRRMOVQ } && Cnd : rB;
	icode in { IIRMOVQ, IOPQ,IIADDQ} : rB;
	icode in { IPUSHQ, IPOPQ, ICALL, IRET } : RRSP;
	1 : RNONE;  # Don't write any register
];

## What register should be used as the M destination?
word dstM = [
	icode in { IMRMOVQ, IPOPQ } : rA;
	1 : RNONE;  # Don't write any register
];

################ Execute Stage   ###################################
执行阶段
## Select input A to ALU
word aluA = [
	icode in { IRRMOVQ, IOPQ } : valA;
	icode in { IIRMOVQ, IRMMOVQ, IMRMOVQ,IIADDQ } : valC;
	icode in { ICALL, IPUSHQ } : -8;
	icode in { IRET, IPOPQ } : 8;
	# Other instructions don't need ALU
];

## Select input B to ALU
word aluB = [
	icode in { IRMMOVQ, IMRMOVQ, IOPQ, ICALL, 
		      IPUSHQ, IRET, IPOPQ,IIADDQ } : valB;
	icode in { IRRMOVQ, IIRMOVQ } : 0;
	# Other instructions don't need ALU
];

## Set the ALU function
word alufun = [
	icode == IOPQ : ifun;
	1 : ALUADD;
];

## Should the condition codes be updated?
bool set_cc = icode in { IOPQ,IIADDQ };
//
part3
修改ncopy.ys和 pipe-full.hcl两个文件，目的是优化代码，提高性能，太难了，人已经傻掉了，整了两天，参考了一下大佬的博客才整出来，先整出源代码，再写汇编码
xorq %rax,%rax	 # count = 0
iaddq $-8,%rdx   # n - 8
jl Test         # if n < 8 jump to Test
Loop:
  mrmovq (%rdi),%r10
  mrmovq 8(%rdi),%r9
  andq %r10,%r10
  rmmovq %r10,(%rsi)
  jle Npos1
  iaddq $1,%rax
Npos1:
  andq %r9,%r9
  rmmovq %r9,8(%rsi)
  jle Npos2
  iaddq $1,%rax
Npos2:

  mrmovq 16(%rdi),%r10
  mrmovq 24(%rdi),%r9
  andq %r10,%r10
  rmmovq %r10,16(%rsi)
  jle Npos3
  iaddq $1,%rax
Npos3:
  andq %r9,%r9
  rmmovq %r9,24(%rsi)
  jle Npos4
  iaddq $1,%rax
Npos4:

  mrmovq 32(%rdi),%r10
  mrmovq 40(%rdi),%r9
  andq %r10,%r10
  rmmovq %r10,32(%rsi)
  jle Npos5
  iaddq $1,%rax
Npos5:
  andq %r9,%r9
  rmmovq %r9,40(%rsi)
  jle Npos6
  iaddq $1,%rax
Npos6:

  mrmovq 48(%rdi),%r10
  mrmovq 56(%rdi),%r9
  andq %r10,%r10
  rmmovq %r10,48(%rsi)
  jle Npos7
  iaddq $1,%rax
Npos7:
  andq %r9,%r9
  rmmovq %r9,56(%rsi)
  jle Npos8
  iaddq $1,%rax
Npos8:

  iaddq $64, %rdi  # add the *src, *dst
  iaddq $64, %rsi
  iaddq $-8, %rdx  # sub i
  jge Loop         # loop

Test:              # n + 8 to deal with remaining numbers
  iaddq $8,%rdx
  jne Rem1
  ret
Rem1:
  mrmovq (%rdi), %r10
  mrmovq 8(%rdi), %r9
  andq %r10, %r10
  jle Pos1
  iaddq $1, %rax
Pos1:
  rmmovq %r10, (%rsi)
  iaddq $-1, %rdx
  jne Rem2
  ret

Rem2:
  andq %r9, %r9
  jle Pos2
  iaddq $1, %rax
Pos2:
  rmmovq %r9, 8(%rsi)
  iaddq $-1, %rdx
  jne Rem3
  ret

Rem3:
  mrmovq 16(%rdi), %r10
  mrmovq 24(%rdi), %r9
  andq %r10, %r10
  jle Pos3
  iaddq $1, %rax
Pos3:
  rmmovq %r10, 16(%rsi)
  iaddq $-1, %rdx
  jne Rem4
  ret

Rem4:
  andq %r9, %r9
  jle Pos4
  iaddq $1, %rax
Pos4:
  rmmovq %r9, 24(%rsi)
  iaddq $-1, %rdx
  jne Rem5
  ret

Rem5:
  mrmovq 32(%rdi), %r10
  mrmovq 40(%rdi), %r9
  mrmovq 48(%rdi), %r8
  andq %r10, %r10
  jle Pos5
  iaddq $1, %rax
Pos5:
  rmmovq %r10, 32(%rsi)
  iaddq $-1, %rdx
  jne Rem6
  ret

Rem6:
  andq %r9, %r9
  jle Pos6
  iaddq $1, %rax
Pos6:
  rmmovq %r9, 40(%rsi)
  iaddq $-1, %rdx
  jne Rem7
  ret

Rem7:
  andq %r8, %r8
  jle Pos7
  iaddq $1, %rax
Pos7:
  rmmovq %r8, 48(%rsi)
